#tag ModuleProtected Module DateExtension	#tag Method, Flags = &h21		Private Function Make_tm_bsd(d as Date) As tm_bsd		  'struct tm *localtime(const time_t *timer)		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function StringValue(extends d as Date, format as String) As String		  		  		  #if targetMacOS		    soft declare function strftime lib SystemFramework (s as Ptr, maxsize as Integer, format as CString, ByRef timeptr as tm_bsd) as Integer		    		    dim buffer as new MemoryBlock(1024)		    		    dim timeptr as tm_bsd		    timeptr.tm_sec = d.Second		    timeptr.tm_min = d.Minute		    timeptr.tm_hour = d.Hour		    timeptr.tm_mday = d.Day		    timeptr.tm_mon = d.Month - 1		    timeptr.tm_year = d.Year - 1900		    timeptr.tm_isdst = 1		    		    dim strftime_result as Integer = strftime(buffer, buffer.Size, format, timeptr)		    if strftime_result > 0 then		      return DefineEncoding(buffer.CString(0), Encodings.SystemDefault)		    else		      return ""		    end if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub StringValue(extends d as Date, format as String, assigns value as String)		  'char *strptime(const char *buf, const char *format, struct tm *tm);		  '		  '#if targetMacOS		  'soft declare function strptime lib SystemFramework (buf as CString, format as CString, ByRef tm as tm_bsd) as Ptr		  '		  'dim tm as tm_bsd		  'dim p as Ptr = strptime(value, format, tm)		  'if p <> nil then		  'd		  '		  '		  '		  'else		  'raise new UnsupportedFormatException		  'end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function unix_epoch() As Date		  		  		  #if targetMacOS		    'struct tm *localtime(const time_t *timer)		    soft declare function gmtime lib SystemFramework (ByRef timer as Integer) as Ptr		    		    dim t as Integer = 0		    dim p as Ptr = gmtime(t)		    if p <> nil then		      dim tm as tm_bsd = p.tm_bsd(0)		      		      dim d as new Date(1900 + tm.tm_year, 1 + tm.tm_mon, tm.tm_mday)		      d.GMTOffset = 0.0		      d.Hour = tm.tm_hour		      d.Minute = tm.tm_min		      d.Second = tm.tm_sec		      return d		    else		      return nil		    end if		    		  #endif		End Function	#tag EndMethod	#tag Note, Name = C declarations				size_t		strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);				#include <time.h>		#include <xlocale.h>				struct tm		int    tm_sec   seconds [0,61]		int    tm_min   minutes [0,59]		int    tm_hour  hour [0,23]		int    tm_mday  day of month [1,31]		int    tm_mon   month of year [0,11]		int    tm_year  years since 1900		int    tm_wday  day of week [0,6] (Sunday = 0)		int    tm_yday  day of year [0,365]		int    tm_isdst daylight savings flag						BSD		struct tm {		int    tm_sec;        /* seconds after the minute [0-60] */		int    tm_min;        /* minutes after the hour [0-59] */		int    tm_hour;    /* hours since midnight [0-23] */		int    tm_mday;    /* day of the month [1-31] */		int    tm_mon;        /* months since January [0-11] */		int    tm_year;    /* years since 1900 */		int    tm_wday;    /* days since Sunday [0-6] */		int    tm_yday;    /* days since January 1 [0-365] */		int    tm_isdst;    /* Daylight Savings Time flag */		long    tm_gmtoff;    /* offset from CUT in seconds */		char    *tm_zone;    /* timezone abbreviation */		};	#tag EndNote	#tag Constant, Name = SystemFramework, Type = String, Dynamic = False, Default = \"System.framework", Scope = Private	#tag EndConstant	#tag Structure, Name = tm_bsd, Flags = &h0		tm_sec as Integer		  tm_min as Integer		  tm_hour as Integer		  tm_mday as Integer		  tm_mon as Integer		  tm_year as Integer		  tm_wday as Integer		  tm_yday as Integer		  tm_isdst as Integer		  tm_gmtoff as Integer		tm_zone as Ptr	#tag EndStructure	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule